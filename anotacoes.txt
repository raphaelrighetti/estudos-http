O HTTP é o protocolo utilizado na web, que funciona em um modelo cliente-servidor e outros protocolos como o TCP/IP para realmente fazer essa comunicação.

HTTP não é o único protocolo de transferência de informação que existe na web, mas é o mais utilizado e está presente em qualquer site que entramos.

============P2P============

P2P, ou "Peer to Peer", é o protocolo utilizado para transferência de torrents, mas que também pode ser utilizado para outras coisas.

Ele tem como característica não utilizar o modelo cliente-servidor, assim fazendo com que cada cliente também tenha um pouco da responsabilidade de enviar respostas e receber requisições, além de fazer requisições e receber respostas.

============URL (Uniform Resource Locator)============

URL é um mecanismo padronizado que nos permite acessar páginas e recursos específicos por meio do protocolo HTTP.

URL existe para padronizar o endereço das páginas e recursos, assim tendo um formato consistente para os endereços.

Ela segue o seguinte padrão:

    <protocolo>://<domínio>:<porta>/<caminho do recurso>

Seguindo este padrão, temos algo como:

    http://localhost:8080/home

URLs não estão limitadas a usar apenas o protocolo HTTP.

============URI (Unified Resource Identifier)============

URIs são caminhos padronizados até recursos específicos, mas podem não conter protocolo e nem a parte de apontar para um recurso específico, como quando acessamos um site sem colocar o "https://www...".

Mas, basicamente, quando estamos falando de URI, estamos falando de URL e vice-versa.

============PORTAS============

Nem sempre precisamos especificar portas quando estamos acessando a um site ou algo do tipo. Isso ocorre porque temos portas padrões que são acessadas automaticamente quando não especificamos nenhum.

Portas padrões:

    HTTP: porta 80
    HTTPS: porta 443
    PORTAS LIVRES: 1023 até 65535

Não usamos abaixo de 1023 porque são portas que podem ser utilizadas por outros serviços.

============DNS============

O DNS tem uma arquitetura em formato de árvore, o que facilita muito na hora de fazer as buscas pelo domínio desejado, pois ele vai descendo o nível hierarquico dos domínios até chegar no domínio desejado.

============REQUISIÇÕES / RESPOSTAS HTTP============

As requisições HTTP seguem o seguinte padrão:

    1. Linha inicial:

        Linha onde definimos o método da requisição e o protocolo a ser utilizado.

    2. Cabeçalhos:

        Linhas que especificam uma série de configurações sobre a requisição / resposta, como o tipo do conteúdo e outras coisas.

    3. Corpo:

        Linhas que representam o conteúdo da requisição / resposta. Pode ser um JSON, um HTML e muito mais.

Dificilmente vamos escrever uma requisição HTTP na mão e usar um telnet da vida para fazermos a requisição, mas é importante saber como as mensagens HTTP são estruturadas para sabermos como interpretá-las e montá-las usando as ferramentas de nossa escolha.

============STATELESS============

Por padrão, o HTTP não guarda estado, o que significa que ele não guarda informações sobre as mensagens anteriores.

Podemos simular um estado fazendo um mecanismo de sessão, utilizando algo como um token JWT ou algo do tipo, ou também com os cookies, de forma que os cookies salvos localmente no cliente sejam usados para comprovar que ele é ele mesmo nas requisições feitas por ele.
